openapi: 3.0.4
info:
  title: Fishsense Data Processing Orchestrator
  description: |-
    Fishsense Data Processing Orchestrator

  contact:
    email: e4e@ucsd.edu
  license:
    name: UCSD Non-commercial
    url: https://raw.githubusercontent.com/UCSD-E4E/fishsense-data-processing-spider/refs/heads/main/LICENSE
  version: 0.0.0
externalDocs:
  description: Find out more about the Fishsense Data Processing Orchestrator
  url: https://github.com/UCSD-E4E/fishsense-data-processing-spider
servers:
  - url: http://fabricant.ucsd.edu:8083
tags:
  - name: job
    description: Job management
  - name: data
    description: Data access
  - name: data/images
    description: Image access
  - name: data/labels
    description: Label access
  - name: data/cal
    description: Calibration data access
  - name: v1
    description: API v1
paths:
  /api/v1/data/raw/{checksum}:
    get:
      tags:
        - v1
        - data
        - data/images
      summary: Retrieves the RAW binary blob represented by the data checksum
      operationId: getRawFile
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      responses:
        '200':
          description: Raw file content
          content:
            application/octet-stream:
              schema:
                format: binary
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
  /api/v1/data/raw:
    put:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - v1
        - data
        - data/images
      summary: Submits a new RAW binary blob
      operationId: putRawFile
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  checksum:
                    type: string
                    example: 09d555e89c65f676094caa7efbf7ee7e
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
  /api/v1/data/preprocess_jpeg/{checksum}:
    get:
      tags:
        - v1
        - data
        - data/images
      summary: Gets the preprocessed JPEG for the RAW file represented by the checksum
      operationId: getPreprocessedFrame
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      responses:
        '200':
          description: Preprocessed image
          content:
            image/jpeg:
              schema:
                format: binary
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '429':
          description: Too many requests
    put:
      tags:
        - v1
        - data
        - data/images
      summary: Puts a preprocessed JPEG for the RAW file represented by the checksum
      operationId: putPreprocessedFrame
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
      security:
        - api_key: []
      responses:
        '200':
          description: Operation success
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /api/v1/data/laser_jpeg/{checksum}:
    get:
      tags:
        - data
        - v1
        - data/images
      summary: Retrieves the laser JPEG for the RAW file represented by the checksum
      operationId: getLaserFrame
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      responses:
        '200':
          description: Preprocessed image with laser
          content:
            image/jpeg:
              schema:
                format: binary
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
    put:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - data
        - v1
        - data/images
      summary: Puts the laser JPEG for the RAW file file represented by the checksum
      operationId: putLaserFrame
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      responses:
        '200':
          description: JPEG accepted
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
      
  /api/v1/data/laser/{checksum}:
    get:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - data
        - v1
        - data/labels
      summary: Retrieves the laser label for the RAW file represented by the checksum
      operationId: getLaserLabel
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      responses:
        '200':
          description: Laser label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaserLabel'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
      
    put:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - data
        - v1
        - data/labels
      summary: Records the laser label
      operationId: putLaserLabel
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      requestBody:
        description: Laser Label to put
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaserLabel'
      responses:
        '200':
          description: success
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /api/v1/data/head_tail/{checksum}:
    get:
      tags:
        - data
        - v1
        - data/labels
      summary: Retrieves the head/tail label for the RAW file represented by the checksum
      operationId: getHeadTailLabel
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      responses:
        '200':
          description: Head/tail label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeadTailLabel'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
    put:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - data
        - v1
        - data/labels
      summary: Records the head/tail label
      operationId: putHeadTailLabel
      parameters:
        - $ref: '#/components/parameters/RawChecksum'
      requestBody:
        description: Head/tail label to put
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeadTailLabel'
      responses:
        '200':
          description: success
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /api/v1/data/depth_cal/{checksum}:
    get:
      tags:
        - data
        - v1
        - data/cal
      summary: Retrieves the depth calibration parameters from the dive set
      operationId: getDepthCal
      parameters:
        - $ref: '#/components/parameters/DiveChecksum'
      responses:
        '200':
          description: Depth calibration parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepthCal'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
    put:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - data
        - v1
        - data/cal
      summary: Records the depth calibration
      operationId: putDepthCal
      parameters:
        - $ref: '#/components/parameters/DiveChecksum'
      requestBody:
        description: Depth calibration to put
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepthCal'
      responses:
        '200':
          description: success
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
  /api/v1/data/lens_cal/{cameraId}:
    get:
      tags:
        - data
        - v1
        - data/cal
      summary: Retrieves the lens calibration parameters from the dive set
      operationId: getLensCal
      parameters:
        - name: cameraId
          description: Camera ID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lens calibration parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LensCal'
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
      security:
        - api_key: []
    put:
      deprecated: false
      x-42c-no-authentication: false
      x-42c-mtls: false
      x-42c-sensitivity: 3
      x-42c-weight-input: 80
      x-42c-weight-output: 20
      x-42c-weight-parameters: 50
      x-42c-weight-requestBody: 50
      tags:
        - data
        - v1
        - data/cal
      summary: Records the lens calibration
      operationId: putLensCal
      parameters:
        - name: cameraId
          description: Camera ID
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Lens calibration to put
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LensCal'
      responses:
        '200':
          description: success
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'

  /api/v1/jobs/preprocess/retrieve_batch:
    post:
      tags:
        - job
        - v1
      summary: Retrieves a new batch of jobs for processing
      description: Retrieves a new batch of jobs for processing
      operationId: getJob
      parameters: 
        - name: nImages
          description: Maximum number of total images in processing job
          in: query
          schema:
            type: integer
            default: 1000
        - name: worker
          in: query
          description: Worker identifier
          schema:
            type: string
      responses: 
        '200':
          description: Batch for processing
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/JobDefinition'
        '400':
          description: Invalid input
      security:
        - api_key: []
      
  /api/v1/jobs/status:
    put:
      tags:
        - job
        - v1
      summary: Update job ID status
      operationId: updateJob
      parameters:
        - name: jobId
          required: true
          in: query
          schema:
            type: string
            description: Job batch identifier
        - name: status
          required: true
          in: query
          schema:
            type: string
            enum:
              - in_progress
              - cancelled
              - failed
        - name: progress
          in: query
          schema:
            type: integer
            description: Percentage complete (0-100)
      security:
        - api_key: []
      responses:
        '200':
          description: Success
        '404':
          $ref: '#/components/responses/404NotFound'
        '401':
          $ref: '#/components/responses/401Unauthorized'
components:
  responses:
    404NotFound:
      description: The specified resource was not found.
    401Unauthorized:
      description: Unauthorized
  parameters:
    RawChecksum:
      name: checksum
      description: Raw File checksum
      in: path
      required: true
      schema:
        type: string
        example: d2e61611523f3d36f0eab788dc221a88
    DiveChecksum:
      name: checksum
      description: Dive checksum
      in: path
      required: true
      schema:
        type: string
        example: 6c6303018d587feeabd17dbd120efe13
  schemas:
    DepthCal:
      type: object
      properties:
        type:
          type: string
          enum:
            - single_laser
            - double_laser
        parameters:
          type: object
    LensCal:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
    HeadTailLabel:
      example:
        task_id: 146796
        head_x: 2226
        head_y: 1474
        tail_x: 1986
        tail_y: 1459
      type: object
      properties:
        task_id:
          type: integer
          description: Label Studio Task ID
        head_x:
          type: integer
          description: X axis location of head in pixels
        head_y:
          type: integer
          description: Y axis location of head in pixels
        tail_x:
          type: integer
          description: X axis location of tail in pixels
        tail_y:
          type: integer
          description: Y axis location of tail in pixels
    LaserLabel:
      example:
        task_id: 33759
        x: 1952
        y: 1421
      type: object
      properties:
        task_id:
          type: integer
          description: Label Studio Task ID
        x:
          type: integer
          description: X axis location of laser label in pixels
        y:
          type: integer
          description: Y axis location of laser label in pixels
    JobDefinition:
      type: object
      properties:
        jobs:
          type: array
          items:
            type: object
            properties:
              jobId:
                type: string
                example: 517c4ae7-cd6d-4ea7-a180-a6f81c4ea52f
              operation:
                type: string
                enum:
                  - preprocess
                  - preprocess_with_laser
                  - find_laser
                  - find_head_tail
                  - get_length
              frameIds:
                type: array
                example: [
                      'f60dfbecc701d929f72047b2a410a3aa',
                      '850314b1302d7277f5c363b243fe2c0c',
                      '2f94aaed68d6c7515f1ba80523e2f130',
                      'e5f52612820497165b9686d7b534c5e6',
                      'b045035545018822435d0c02eb782a61',
                      '5a0d1ae1d60117d94f2ddf3f4074bae8'
                    ]
                items:
                  type: string
                description: List of frame checksums
              cameraId:
                type: integer
                example: 1
                description: Camera ID
              diveId:
                type: string
                example: 6c6303018d587feeabd17dbd120efe13
                description: Dive Checksum.  Will be null if multiple dives are present


  securitySchemes:
    # petstore_auth:
    #   type: oauth2
    #   flows:
    #     implicit:
    #       authorizationUrl: https://petstore3.swagger.io/oauth/authorize
    #       scopes:
    #         write:pets: modify pets in your account
    #         read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
